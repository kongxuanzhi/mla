//#include <highgui.h>
//#include <cv.h>
//#include<vector>
//#include <algorithm>
//#include <iostream>
//using  namespace std;
//
//#define CVX_RED CV_RGB(0xff, 0x00, 0x00)  
//#define CVX_GREEN CV_RGB(0x00, 0xff, 0x00)  
//#define CVX_BLUE CV_RGB(0x00, 0x00, 0xff)  
//
//int H = 540;
//
//int lineH = 25;  //小于这个值，算是一行   //可以固定
//int thresholdx = 10;  // x1-x2小于这个值的算是一类   //可以固定
//int thresholdy = H/7;  //y1-y2小于这个值的算是一类   // 重新弄
//int max_len = 300; //大于300高的去掉     //
//int state_len = 75;  //长度小于75的算打开
//int max_area = 3000; //面积大于这个的过滤掉
//int min_area = 200;  //小于这个的过滤掉
//
//typedef struct Area{
//	CvPoint center;
//	int width;
//	int height;
//	Area(CvPoint p, int w, int h){
//		center = p; width = w; height = h;
//	}
//}Area;
//
//typedef struct State{
//	int x;
//	int y;
//	bool state;  //开 false， 闭合 true
//}State;
//
//static int cmp_func(const void* _a, const void* _b, void* userdata)
//{
//	Area* a = (Area*)_a;
//	Area* b = (Area*)_b;
//	int y_diff = a->center.y - b->center.y;
//	int x_diff = a->center.x - b->center.x;
//	//int lineH = *(int*)userdata;
//	if (abs(y_diff) < lineH){ //近似看作一条行
//		return x_diff;  //根据x排序
//	}
//	else if (y_diff < 0){  //不需要调整
//		return -1;
//	}
//	else if (y_diff > lineH){   //一个点在另一个点的下面，一定需要调整
//		return 1;
//	}
//}
//
//
//bool getInstance(const CvScalar color, CvScalar g_piple, CvScalar gaps){
//	return abs(color.val[0] - g_piple.val[0]) < gaps.val[0]
//		&& abs(color.val[1] - g_piple.val[1]) < gaps.val[1]
//		&& abs(color.val[2] - g_piple.val[2]) < gaps.val[2];
//}
//IplImage* ThresholdImg(IplImage *src, CvScalar g_piple, CvScalar gaps){
//	IplImage *temp = cvCreateImage(cvGetSize(src), 8, 3);
//	cvCopy(src, temp);
//	for (int i = 0; i < temp->height; i++){
//		for (int j = 0; j < temp->width; j++){
//			CvScalar color = cvGet2D(temp, i, j);
//			if (getInstance(color, g_piple, gaps)){
//				cvSet2D(temp, i, j, cvScalarAll(0));
//			}
//			else{
//				cvSet2D(temp, i, j, cvScalarAll(255));
//			}
//		}
//	}
//	return temp;
//}
//
//int is_equal(const void* _a, const void* _b, void* userdata)
//{
//	CvPoint a = (*(const Area*)_a).center;
//	CvPoint b = (*(const Area*)_b).center;
//	return abs(a.x - b.x) <= thresholdx && abs(a.y - b.y) <thresholdy;  
//}
////在二值化的图片上查找轮廓
//CvSeq* FindCountour(IplImage *img){
//	CvSeq* first_contour = NULL;
//	int Nc = cvFindContours(
//		img,   //在该单通道图片上查找轮廓
//		cvCreateMemStorage(),
//		&first_contour,
//		sizeof(CvContour),
//		CV_RETR_CCOMP   //CV_RETR_CCOMP //不要内部的轮廓
//		);
//	printf("总共的轮廓数目 : %d\n", Nc);
//	return first_contour;
//}
//#define RED 1
//#define GREEN 2
//bool isColor(float value, int color){
//	switch (color)
//	{
//	case RED:
//		if (value >= 340 || value < 14)  //340 14
//			return true;
//		else
//			return false;
//		break;
//	default:
//		break;
//	}
//	return false;
//}
//
////移除边框
//void RemoveRedBorad(IplImage *h){
//	for (int x = 1; x < h->width - 1; x++){
//		int redNum = 0;
//		int maxRedNum = 0;
//		for (int y = 1; y < h->height - 1; y++){
//			float value = cvGet2D(h, y, x).val[0];
//			if (isColor(value, RED)){//
//				redNum++;
//				if (redNum > maxRedNum){
//					maxRedNum = redNum;
//				}
//				cvSet2D(h, y, x, CvScalar(360, 0, 0));
//			}
//			else{
//				redNum = 0;
//				cvSet2D(h, y, x, CvScalar(0, 0, 0));
//			}
//		}
//		if (maxRedNum > h->height / 5){
//			for (int y = 1; y < h->height - 2; y++){
//				cvSet2D(h, y, x, CvScalar(0, 0, 0));
//			}
//		}
//	}
//	for (int y = 1; y < h->height - 1; y++){
//		int redNum = 0;
//		int maxRedNum = 0;
//		float* ptr = (float*)(h->imageData + y*h->widthStep);
//		for (int x = 1; x < h->width - 1; x++){
//			float value = ptr[x];
//			if (value == 360){  //这个区间是红色的
//				redNum++;
//				if (redNum > maxRedNum){
//					maxRedNum = redNum;
//				}
//			}
//			else{
//				redNum = 0;
//			}
//		}
//		if (maxRedNum > h->width / 11){  //这个比例需要调整
//			for (int x = 1; x < h->width - 1; x++){
//				cvSet2D(h, y, x, CvScalar(0, 0, 0));
//			}
//		}
//	}
//}
//
//int main(){
//	/*int width = 1440;
//	int height = 1080;*/
//	int width = 720;
//	int height = 540;
//	IplImage *init = cvLoadImage("闸刀识别图片7李伟拍 - 副本 (2).jpg");
//	IplImage *in = cvCreateImage(CvSize(width, height), 8, 3);
//	cvResize(init, in, CV_INTER_LINEAR);
//	cvNamedWindow("原图", CV_WINDOW_AUTOSIZE);
//	cvShowImage("原图", in);
//#if 0
//	cvSmooth(in, in, CV_GAUSSIAN, 5, 5);
//	cvSmooth(in, in, CV_GAUSSIAN, 5, 5);
//	cvSmooth(in, in, CV_GAUSSIAN, 5, 5);
//	cvDilate(in, in);
//	cvDilate(in, in);
//	cvWaitKey(0);
//
//	CvScalar g_piple = CvScalar(171, 180, 177, 0);// //  // 146, 70, 80//53,100,82
//	CvScalar gaps = CvScalar(195, 94, 176);
//	IplImage *des2 = ThresholdImg(in, g_piple, gaps); //根据相似的颜色，二值化图片   有待完善
//	IplImage *des = cvCreateImage(cvGetSize(in), 8, 1);
//	cvSplit(des2, 0, des, 0, 0);
//
//	cvNamedWindow("二值化后的图", CV_WINDOW_AUTOSIZE);
//	cvShowImage("二值化后的图", des);
//	cvWaitKey(0);
//#endif
//
//	IplImage * src_float = cvCreateImage(cvGetSize(in), IPL_DEPTH_32F, 3);
//	cvConvertScale(in, src_float);
//
//	IplImage *hsv = cvCreateImage(cvGetSize(in), IPL_DEPTH_32F, 3);
//	IplImage *h = cvCreateImage(cvGetSize(in), IPL_DEPTH_32F, 1);
//	cvCvtColor(src_float, hsv, CV_BGR2HSV);
//	cvSplit(hsv, h, 0, 0, 0);
//
//	RemoveRedBorad(h);
//
//	IplConvKernel *element = cvCreateStructuringElementEx(3, 3, 1, 1, CV_SHAPE_ELLIPSE);
//	cvErode(h, h, element, 3);
//	cvDilate(h, h, element, 8);
//	IplImage *dst = cvCreateImage(cvGetSize(in), 8, 1);//二值化结果
//	cvConvertScale(h, dst);  //转化过来就行了
//	
//#if 1 
//	CvSeq* first_contour = FindCountour(dst);
//
//	int nk = 0;
//	CvFont font;
//	cvInitFont(&font, CV_FONT_HERSHEY_PLAIN, 1, 1);//初始化画笔
//	IplImage *initContourImg = cvCreateImage(cvGetSize(in), 8, 3);
//	printf("he:%d,", initContourImg->height);
//	CvSeq*  point_seq = cvCreateSeq(0, sizeof(CvSeq), sizeof(Area),cvCreateMemStorage(0));//保存中心点
//	for (CvSeq* c = first_contour; c != NULL; c = c->h_next){
//		cvDrawContours(initContourImg, c, CVX_RED, CVX_BLUE, 0, 1, 8);  //画出轮廓 
//		CvRect rect = cvBoundingRect(c);
//		cvRectangleR(initContourImg, rect, cvScalarAll(255));  //画出外接矩形
//		CvPoint center = CvPoint((2 * rect.x + rect.width) / 2,
//									(2 * rect.y + rect.height) / 2);  //获得轮廓外接矩形中心点
//		Area area = Area(center,rect.width,rect.height);
//		cvSeqPush(point_seq, &area);  //将中心点保存在序列中
//		char str[25];
//		itoa(nk, str, 10);
//		nk++;
//		cvPutText(initContourImg, str, cvPoint(center.x, center.y), &font, CV_RGB(0, 255, 0));//在图片中输出字符 
//		cvShowImage("初始勾勒轮廓", initContourImg);
//	}
//	cvWaitKey(0);
//#endif //point_seq
//
//	CvSeq* labels = 0; //声明输出标签
//	int i, class_count = cvSeqPartition(point_seq, 0, &labels, is_equal, 0); //聚类
//	printf("\nclass_count: %d\n", class_count);
//	CvSeq*  point_sort_seq = cvCreateSeq(0, sizeof(CvSeq), sizeof(Area), cvCreateMemStorage(0));//保存中心点
//	int kk = 0;
//	while (kk < class_count){
//		int h = 0;
//		int w = 0;
//		int t_x = 0;
//		int t_y = 0;
//		int b_num = 0;
//		for (int k = 0; k < labels->total; k++){
//			int curLab = *(int*)cvGetSeqElem(labels, k); // 
//			if (curLab == kk){  //第kk类
//				Area curArea = (*(Area*)cvGetSeqElem(point_seq, k)); 
//				h += curArea.height;  //总高度
//				printf("%d,", curArea.width);
//
//				w =MAX(curArea.width,w);  //要改
//				t_x += curArea.center.x;
//				t_y += curArea.center.y;
//				b_num++;
//			}
//		}
//
//		//过滤
//		if (h > H / 5){  //太长了的话，不行
//			kk++;
//			continue;
//		}
//		if ((b_num == 1 && (h < H / 10))){   //只有一个分类，并且高度小于70的都扔掉  
//			kk++;
//			continue;
//		}
//		printf("h:%d,w:%d ",h,w);
//		CvPoint newCenter = CvPoint(t_x / b_num, t_y/b_num);  //合并后的中心点
//		Area bigArea = Area(newCenter, w,h); //合并为一个开关   
//		cvSeqPushFront(point_sort_seq, &bigArea);  //推进去一个开关
//		kk++;
//	}
//
//	//printf("point_sort_seq_size:%d\n", point_sort_seq->total);  //多少个开关
//	cvSeqSort(point_sort_seq, cmp_func);  //单个点根据中心点坐标排下序 从左到右->从上到下
//	cvSeqPartition(point_sort_seq, 0, &labels, is_equal, 0);   //聚类 打乱了顺序，重新分下类， 重新分下类
//	char str1[25];
//	char str3[25];
//	char str4[25];
//	char *state;
//	bool bs;
//	IplImage *canvas = cvCreateImage(cvGetSize(in), 8, 3);
//
//	int x = 1;
//	int y = 0;
//	int prey = 0;
//	State *states = (State*)malloc(sizeof(State)* point_sort_seq->total);
//	for (i = 0; i < point_sort_seq->total; i++)
//	{
//		bs = true;
//		state = "close";
//		int curlab = *(int*)cvGetSeqElem(labels, i);
//		CvPoint pt = (*(Area*)cvGetSeqElem(point_sort_seq, i)).center;
//		int h = (*(Area*)cvGetSeqElem(point_sort_seq, i)).height;
//		int w = (*(Area*)cvGetSeqElem(point_sort_seq, i)).width;
//		if (h < H/8)  { //得到开关的状态
//			bs = false;
//			state = "open";
//		}
//		printf("pt.x:%d, preP：%d\n", pt.x, prey);
//		if (abs(pt.y - prey) > w*2){
//			x++;
//			y = 0;
//		}
//		prey = pt.y;
//		y++;
//		printf("(%d,%d)\t",x,y);  //state
//		states[i].state = bs;
//		states[i].x = x;
//		states[i].y = y;
//		//printf("第%d个%s\n", i,state);
//		//printf("{%d,%d},", pt.x, pt.y);
//		cvCircle(canvas, pt, 3, CvScalar(255), -1);
//		itoa(curlab, str1, 10);
//		itoa(h, str3, 10);
//		itoa(w, str4, 10);
//		//printf("%d,", w);
//		cvPutText(canvas, str3, CvPoint(pt.x - 55, pt.y - 15), &font, CV_RGB(0, 255, 0));//高度
//		cvPutText(canvas, str4, CvPoint(pt.x - 5, pt.y - 15), &font, CV_RGB(0, 255, 0));// 宽度
//		cvPutText(canvas, str1, pt, &font, CV_RGB(0, 0, 255));//类别
//		cvPutText(canvas, state, pt, &font, CV_RGB(0, 255, 255));//开关状态
//		cvRectangleR(canvas, CvRect(pt.x - w / 2, pt.y - h / 2, w, h), cvScalarAll(255));
//	    cvShowImage("points", canvas);
//		cvWaitKey(200);
//	}
//	printf("\n");
//
//	for (int i = 0; i < point_sort_seq->total; i++){
//		printf("(x:%d,y:%d, state:%d)\n", states[i].x, states[i].y, states[i].state);
//	}
//	cvWaitKey(0);
//}
